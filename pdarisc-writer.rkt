#lang racket
(require "pdarisc-data.rkt")
(provide write-pdarisc write-insn)

(define (write-pdarisc p)
  (map write-insn (pdarisc-insns p)))

(define (write-insn i)
  (define w write-insn)
  (define (ws ls) (map w ls))

  (match i
    ((assign id val)
     `(:= ,id ,(w val)))
    ((push val)
     `(push ,(w val)))
    ((sem-act params retvars action)
     `(semantic-action ,params
                       ,retvars
                       ,action))
    ((drop-token)
     'drop-token)
    ((get-token)
     'get-token)
    ((stack-ensure hdrm)
     `(stack-ensure ,hdrm))
    ((block insns)
     `(block . ,(ws insns)))
    ((label ids param-lists bodies body)
     `(label ,(map list* ids param-lists (ws bodies))
             . ,(ws body)))
    ((block* insns)
     `(block . ,(ws insns)))
    ((accept vals)
     `(accept . ,vals))
    ((if-eos cnsq altr)
     `(if-eos ,(w cnsq) ,(w altr)))
    ((state-case st looks cnsqs)
     `(state-case ,st . ,(map cons looks (ws cnsqs))))
    ((token-case looks cnsqs)
     `(token-case . ,(map cons looks (ws cnsqs))))
    ((go target args)
     `(go ,target . ,(ws args)))
    ((pop)
     `(pop))
    ((var-ref id)
     id)
    ((state id)
     `(state ,id))
    ((nterm id)
     `(nterm ,id))
    ((curr-token #f)
     '(current-token))
    ((curr-token n)
     `(current-token ,n))
    ((list insns ...)
     (ws insns))))