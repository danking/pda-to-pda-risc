#lang racket
(provide (all-defined-out))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SAMPLE DATA USED IN TESTS
(define pda1
  '((tokens A B $eos)
    (eos $eos)
    (start s1)
    (state s1 (shift (A) s2) (goto start s6))
    (state s2 (shift (A) s2) (shift (B) s3) (goto start s4))
    (state s3 (reduce () r2))
    (state s4 (shift (B) s5))
    (state s5 (reduce () r1))
    (state s6 (accept ($eos)))
    (rule r1 start  (#f #t #f) (lambda (x) (+ 2 x)))
    (rule r2 start  (#f #f)    (lambda () 2))
    (rule r3 accept (#t #f)    (lambda (x) x))))

(define single-shift-state
  '(state s1 (shift (A) s2) (goto start s6)))
(define single-shift-state-risc
  '((s1 ()
        (push (state s1-reduce))
        (if-eos (block)
                (block get-token
                       (push (current-token))
                       (token-case ((A) (go s2))))))
    (s1-reduce (nt sem-val)
               (push (state s1-reduce))
               (push sem-val)
               (state-case nt (start (go s6))))
    (s1-eos ()
            (push (state s1-reduce-eos)))
    (s1-reduce-eos (nt sem-val)
                   (push (state s1-reduce-eos))
                   (push sem-val)
                   (state-case nt (start (go s6-eos))))))
(define multiple-shift-state
  '(state s2 (shift (A) s2) (shift (B) s3) (goto start s4)))
(define multiple-shift-state-risc
  '((s2 ()
        (push (state s2-reduce))
        (if-eos (block)
                (block get-token
                       (push (current-token))
                       (token-case ((A) (go s2))
                                   ((B) (go s3))))))
    (s2-reduce (nt sem-val)
               (push (state s2-reduce))
               (push sem-val)
               (state-case nt (start (go s4))))
    (s2-eos ()
            (push (state s2-reduce-eos)))
    (s2-reduce-eos (nt sem-val)
                   (push (state s2-reduce-eos))
                   (push sem-val)
                   (state-case nt (start (go s4-eos))))))
(define reducing-state
  '(state s3 (reduce () r2)))
(define reducing-state-risc
  '((s3 ()
        (push (state s3-reduce))
        (if-eos (block)
                (block get-token
                       (push (current-token))
                       (token-case (() (go r2))))))
    (s3-reduce (nt sem-val)
               (push (state s3-reduce))
               (push sem-val)
               (state-case nt))
    (s3-eos ()
            (push (state s3-reduce-eos)))
    (s3-reduce-eos (nt sem-val)
                   (push (state s3-reduce-eos))
                   (push sem-val)
                   (state-case nt))))
(define accepting-state
  '(state s6 (accept ($eos))))
(define accepting-state-risc
  '((s6 ()
         (push (state s6-reduce))
         (if-eos (block (block (pop)
                               (:= return-value (pop))
                               (accept return-value)))
                 (block get-token
                        (push (current-token))
                        (token-case))))
     (s6-reduce (nt sem-val)
                (push (state s6-reduce))
                (push sem-val)
                (state-case nt))
     (s6-eos ()
             (push (state s6-reduce-eos))
             (block (pop)
                    (:= return-value (pop))
                    (accept return-value)))
     (s6-reduce-eos (nt sem-val)
                    (push (state s6-reduce-eos))
                    (push sem-val)
                    (state-case nt))))